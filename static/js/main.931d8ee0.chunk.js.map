{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calorie","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","exampleReq","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","console","log","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCiB3CC,EAfA,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACpC,OACI,yBAAKC,UAAaC,IAAMC,QACpB,4BAAKN,GACL,4BACKG,EAAYI,IAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,SAGxB,2BAAIR,GACJ,yBAAKG,UAAaC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,OCwE5CC,G,MA/EH,WAEV,IAFgB,EAMcC,mBAAS,IANvB,mBAMTC,EANS,KAMAC,EANA,OASYF,mBAAS,IATrB,mBASTG,EATS,KASDC,EATC,OAcUJ,mBAAS,WAdnB,mBAcTK,EAdS,KAcFC,EAdE,KAiBVC,EAAU,0CAAsCF,EAAtC,mBAfD,WAeC,oBAdA,oCAgBhBG,oBAAU,WACRC,KACC,CAACJ,IAGJ,IAAMI,EAAU,sCAAG,8BAAAC,EAAA,qEAEMC,MAAMJ,GAFZ,cAEXK,EAFW,gBAKEA,EAASC,OALX,OAKXC,EALW,OAMjBZ,EAAWY,EAAKC,MANC,yCAAH,qDA8BhB,OAEE,yBAAKxB,UAAU,OAEb,0BAAMyB,SAVQ,SAAAC,GAChBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAOqBb,UAAU,eACrC,2BAAOA,UAAU,aAAa4B,KAAK,OAAOC,MAAOjB,EAAQkB,SArB1C,SAAAJ,GACnBb,EAAUa,EAAEK,OAAOF,OACnBG,QAAQC,IAAIrB,MAoBR,4BAAQZ,UAAU,gBAAgB4B,KAAK,UAAvC,WAIF,yBAAK5B,UAAY,WAChBU,EAAQP,IAAI,SAAAD,GAAM,OACjB,kBAAC,EAAD,CACAgC,IAAOhC,EAAOA,OAAOiC,MACrBvC,MAAOM,EAAOA,OAAOiC,MACrBtC,QAASK,EAAOA,OAAOL,QACvBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAeG,EAAOA,OAAOH,oBCjEjBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.931d8ee0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__15vmG\",\"image\":\"recipe_image__2ZXt4\"};","import React from 'react';\r\nimport style from './recipe.module.css'\r\n//T \r\nconst Recipe = ({title, calorie, image, ingredients}) => {\r\n    return (\r\n        <div className = {style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calorie}</p>\r\n            <img className = {style.image} src={image} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe","import React, {useEffect, useState} from 'react'; \nimport Recipe from './Recipe';\nimport './App.css';\n//import { tsConstructorType } from '@babel/types';\n//Use const to place App variable permanently\n//App equals a function that doesn't have a parameter\nconst App = () => {\n  //Decalered the Api ID and key\n  const APP_ID = \"c03795ac\";\n  const APP_Key = \"2d02c6adc893ec08a564945208029c08\"\n  \n  //Create a const with an empty array recipes and setRecipes\n  const [recipes, setRecipes] = useState([]);\n \n  //create a const with an empty string search, and setSearch\n  const [search, setSearch] = useState('');\n  //For making a request use UseEffect\n  //UseEffect: Everytime page rerender itself the page is just going to run\n\n  //Create a const with with query and setQuery with the string chicken\n  const [query, setQuery] = useState(\"chicken\");\n\n  //exampleReq equals the website, with the query app_id and app_key\n  const exampleReq = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_Key}`;\n\n  useEffect(() => {\n    getRecipes()\n  }, [query]);\n\n  //getRecipes, a function that fetch all the data from edamam\n  const getRecipes = async () => {\n    //variable response that wait for and fetch the data from exampleReq\n    const response = await fetch(exampleReq)\n    //when the response comes back, we await the response with a method json\n    //json just will format it the data neatly\n    const data = await response.json();\n    setRecipes(data.hits);\n    //console.log(data.hits)\n  }\n\n  //create a arrow function expression, with the event\n  //Everytime you run an onChange or click, the setSearch is going to run\n  //from the state\n  //e.target.value is set to the value of the input\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search)\n  }\n\n  //e = event\n  //implement getSearch to the submit form\n  //e.preventDefault stops the refresh of the page\n  //setQuery(search), whenever we input something to the search input,\n  //it updates the setQuery\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return(\n    //A div with a form element and a class of search-form\n    <div className=\"App\">\n      {/*Form element with a input with the type text and button with a type of submit*/}\n      <form onSubmit = {getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange = {updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className = \"recipes\">\n      {recipes.map(recipe => (\n        <Recipe \n        key = {recipe.recipe.label}\n        title={recipe.recipe.label} \n        calorie={recipe.recipe.calorie} \n        image={recipe.recipe.image}\n        ingredients = {recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}